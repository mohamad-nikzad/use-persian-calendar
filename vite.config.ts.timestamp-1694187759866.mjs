// vite.config.ts
import { resolve } from "node:path";
import react from "file:///E:/Projects/use-calendar/node_modules/.pnpm/@vitejs+plugin-react@3.1.0_vite@4.1.1/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { defineConfig } from "file:///E:/Projects/use-calendar/node_modules/.pnpm/vite@4.1.1_@types+node@18.13.0/node_modules/vite/dist/node/index.js";
import dts from "file:///E:/Projects/use-calendar/node_modules/.pnpm/vite-plugin-dts@1.7.2_@types+node@18.13.0_vite@4.1.1/node_modules/vite-plugin-dts/dist/index.mjs";
import EsLint from "file:///E:/Projects/use-calendar/node_modules/.pnpm/vite-plugin-linter@2.0.2/node_modules/vite-plugin-linter/dist/index.js";
import tsConfigPaths from "file:///E:/Projects/use-calendar/node_modules/.pnpm/vite-tsconfig-paths@4.0.5_typescript@4.9.5/node_modules/vite-tsconfig-paths/dist/index.mjs";

// package.json
var peerDependencies = {
  "date-fns-jalali": "^2.30.0-0 ||>=^2.30",
  "moment-jalaali": "^0.9.6",
  react: "^18.2.0 || >=17.x",
  "react-dom": "^18.2.0 || >=17.x"
};

// vite.config.ts
var { EsLinter, linterPlugin } = EsLint;
var vite_config_default = defineConfig((configEnv) => ({
  plugins: [
    react(),
    tsConfigPaths(),
    linterPlugin({
      include: ["./src}/**/*.{ts,tsx}"],
      linters: [new EsLinter({ configEnv })]
    }),
    dts({
      include: ["src/"]
    })
  ],
  build: {
    lib: {
      entry: resolve("src", "index.ts"),
      name: "UserPersianCalendar",
      formats: ["es", "umd"],
      fileName: (format) => `use-persian-calendar.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRTpcXFxcUHJvamVjdHNcXFxcdXNlLWNhbGVuZGFyXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJFOlxcXFxQcm9qZWN0c1xcXFx1c2UtY2FsZW5kYXJcXFxcdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0U6L1Byb2plY3RzL3VzZS1jYWxlbmRhci92aXRlLmNvbmZpZy50c1wiOy8qKiBAdHlwZSB7aW1wb3J0KCd2aXRlJykuVXNlckNvbmZpZ30gKi9cbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdub2RlOnBhdGgnXG5cbmltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdCdcbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnXG5pbXBvcnQgZHRzIGZyb20gJ3ZpdGUtcGx1Z2luLWR0cydcbmltcG9ydCBFc0xpbnQgZnJvbSAndml0ZS1wbHVnaW4tbGludGVyJ1xuaW1wb3J0IHRzQ29uZmlnUGF0aHMgZnJvbSAndml0ZS10c2NvbmZpZy1wYXRocydcbmNvbnN0IHsgRXNMaW50ZXIsIGxpbnRlclBsdWdpbiB9ID0gRXNMaW50XG5pbXBvcnQgKiBhcyBwYWNrYWdlSnNvbiBmcm9tICcuL3BhY2thZ2UuanNvbidcbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKGNvbmZpZ0VudikgPT4gKHtcbiAgcGx1Z2luczogW1xuICAgIHJlYWN0KCksXG4gICAgdHNDb25maWdQYXRocygpLFxuICAgIGxpbnRlclBsdWdpbih7XG4gICAgICBpbmNsdWRlOiBbJy4vc3JjfS8qKi8qLnt0cyx0c3h9J10sXG4gICAgICBsaW50ZXJzOiBbbmV3IEVzTGludGVyKHsgY29uZmlnRW52IH0pXSxcbiAgICB9KSxcbiAgICBkdHMoe1xuICAgICAgaW5jbHVkZTogWydzcmMvJ10sXG4gICAgfSksXG4gIF0sXG4gIGJ1aWxkOiB7XG4gICAgbGliOiB7XG4gICAgICBlbnRyeTogcmVzb2x2ZSgnc3JjJywgJ2luZGV4LnRzJyksXG4gICAgICBuYW1lOiAnVXNlclBlcnNpYW5DYWxlbmRhcicsXG4gICAgICBmb3JtYXRzOiBbJ2VzJywgJ3VtZCddLFxuICAgICAgZmlsZU5hbWU6IChmb3JtYXQpID0+IGB1c2UtcGVyc2lhbi1jYWxlbmRhci4ke2Zvcm1hdH0uanNgLFxuICAgIH0sXG4gICAgcm9sbHVwT3B0aW9uczoge1xuICAgICAgZXh0ZXJuYWw6IFsuLi5PYmplY3Qua2V5cyhwYWNrYWdlSnNvbi5wZWVyRGVwZW5kZW5jaWVzKV0sXG4gICAgfSxcbiAgfSxcbn0pKVxuIiwgIntcbiAgXCJuYW1lXCI6IFwidXNlLXBlcnNpYW4tY2FsZW5kYXJcIixcbiAgXCJwcml2YXRlXCI6IGZhbHNlLFxuICBcInZlcnNpb25cIjogXCIxLjAuOFwiLFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJmaWxlc1wiOiBbXG4gICAgXCJkaXN0XCJcbiAgXSxcbiAgXCJleHBvcnRzXCI6IHtcbiAgICBcIi5cIjoge1xuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvdXNlLXBlcnNpYW4tY2FsZW5kYXIuZXMuanNcIixcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC91c2UtcGVyc2lhbi1jYWxlbmRhci51bWQuanNcIlxuICAgIH1cbiAgfSxcbiAgXCJtYWluXCI6IFwiLi9kaXN0L3VzZS1wZXJzaWFuLWNhbGVuZGFyLnVtZC5qc1wiLFxuICBcIm1vZHVsZVwiOiBcIi4vZGlzdC91c2UtcGVyc2lhbi1jYWxlbmRhci5lcy5qc1wiLFxuICBcInR5cGVzXCI6IFwiLi9kaXN0L2luZGV4LmQudHNcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICBcImJ1aWxkXCI6IFwidHNjICYmIHZpdGUgYnVpbGRcIixcbiAgICBcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXdcIixcbiAgICBcInByZXBhcmVcIjogXCJodXNreSBpbnN0YWxsXCIsXG4gICAgXCJ0ZXN0XCI6IFwidml0ZXN0XCIsXG4gICAgXCJjb3ZlcmFnZVwiOiBcInZpdGVzdCBydW4gLS1jb3ZlcmFnZVwiLFxuICAgIFwibGludFwiOiBcImVzbGludCAnc3JjLyoqLyoue2pzLGpzeCx0cyx0c3h9J1wiLFxuICAgIFwibGludDpmaXhcIjogXCJlc2xpbnQgLS1maXggJ3NyYy8qKi8qLntqc3gsdHMsdHN4fSdcIixcbiAgICBcImZvcm1hdFwiOiBcInByZXR0aWVyIC0td3JpdGUgc3JjLy8qKi8qLnt0cyx0c3gsY3NzfSAtLWNvbmZpZyAuLy5wcmV0dGllcnJjXCIsXG4gICAgXCJwcmVjb21taXRcIjogXCJucHggbGludC1zdGFnZWRcIlxuICB9LFxuICBcImh1c2t5XCI6IHtcbiAgICBcImhvb2tzXCI6IHtcbiAgICAgIFwicHJlLWNvbW1pdFwiOiBcImxpbnQtc3RhZ2VkXCJcbiAgICB9XG4gIH0sXG4gIFwibGludC1zdGFnZWRcIjoge1xuICAgIFwic3JjLyoqLyoue2pzLGpzeCx0cyx0c3h9XCI6IFtcbiAgICAgIFwicG5wbSAgZXNsaW50XCIsXG4gICAgICBcInBucG0gIGZvcm1hdFwiXG4gICAgXVxuICB9LFxuICBcInBlZXJEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiZGF0ZS1mbnMtamFsYWxpXCI6IFwiXjIuMzAuMC0wIHx8Pj1eMi4zMFwiLFxuICAgIFwibW9tZW50LWphbGFhbGlcIjogXCJeMC45LjZcIixcbiAgICBcInJlYWN0XCI6IFwiXjE4LjIuMCB8fCA+PTE3LnhcIixcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjAgfHwgPj0xNy54XCJcbiAgfSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGNvbW1pdGxpbnQvY2xpXCI6IFwiXjE3LjQuMlwiLFxuICAgIFwiQGNvbW1pdGxpbnQvY29uZmlnLWNvbnZlbnRpb25hbFwiOiBcIl4xNy40LjJcIixcbiAgICBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjogXCJeMTMuNC4wXCIsXG4gICAgXCJAdHlwZXMvbW9tZW50LWphbGFhbGlcIjogXCJeMC43LjVcIixcbiAgICBcIkB0eXBlcy9ub2RlXCI6IFwiXjE4LjEzLjBcIixcbiAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4wLjI3XCIsXG4gICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjAuMTBcIixcbiAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9lc2xpbnQtcGx1Z2luXCI6IFwiXjUuNTEuMFwiLFxuICAgIFwiQHR5cGVzY3JpcHQtZXNsaW50L3BhcnNlclwiOiBcIl41LjUxLjBcIixcbiAgICBcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI6IFwiXjMuMS4wXCIsXG4gICAgXCJAdml0ZXN0L2NvdmVyYWdlLWM4XCI6IFwiXjAuMjguNVwiLFxuICAgIFwiZXNsaW50XCI6IFwiXjguMzQuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdFwiOiBcIl43LjMyLjJcIixcbiAgICBcImVzbGludC1wbHVnaW4tc2ltcGxlLWltcG9ydC1zb3J0XCI6IFwiXjEwLjAuMFwiLFxuICAgIFwiaHVza3lcIjogXCJeOC4wLjNcIixcbiAgICBcImpzZG9tXCI6IFwiXjIxLjEuMFwiLFxuICAgIFwibW9tZW50LWphbGFhbGlcIjogXCJeMC45LjZcIixcbiAgICBcInByZXR0aWVyXCI6IFwiXjIuOC40XCIsXG4gICAgXCJyZWFjdFwiOiBcIl4xOC4yLjBcIixcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIixcbiAgICBcInJlYWN0LWhvb2tzXCI6IFwiXjEuMC4xXCIsXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjQuOS4zXCIsXG4gICAgXCJ2aXRlXCI6IFwiXjQuMS4wXCIsXG4gICAgXCJ2aXRlLXBsdWdpbi1kdHNcIjogXCJeMS43LjJcIixcbiAgICBcInZpdGUtcGx1Z2luLWxpbnRlclwiOiBcIl4yLjAuMlwiLFxuICAgIFwidml0ZS10c2NvbmZpZy1wYXRoc1wiOiBcIl40LjAuNVwiLFxuICAgIFwidml0ZXN0XCI6IFwiXjAuMjguNFwiXG4gIH0sXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vbW9oYW1hZC1uaWt6YWQvdXNlLXBlcnNpYW4tY2FsZW5kYXJcIlxuICB9LFxuICBcImF1dGhvclwiOiBcIm1vaGFtYWQgbmlremFkXCIsXG4gIFwia2V5d29yZHNcIjogW1xuICAgIFwiY2FsZW5kZXJcIixcbiAgICBcInJlYWN0LWNhbGVuZGFyXCIsXG4gICAgXCJwZXJzaWFuLWNhbGVuZGFyXCIsXG4gICAgXCJwZXJzaWFuLWNhbGVuZGFyLWhvb2tcIixcbiAgICBcInJlYWN0LXBlcnNpYW4tY2FsZW5kYXJcIixcbiAgICBcInBlcnNpYW5cIlxuICBdLFxuICBcImJ1Z3NcIjoge1xuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL21vaGFtYWQtbmlremFkL3VzZS1wZXJzaWFuLWNhbGVuZGFyL2lzc3Vlc1wiXG4gIH0sXG4gIFwiaG9tZXBhZ2VcIjogXCJodHRwczovL2dpdGh1Yi5jb20vbW9oYW1hZC1uaWt6YWQvdXNlLXBlcnNpYW4tY2FsZW5kYXIjcmVhZG1lXCIsXG4gIFwibGljZW5zZVwiOiBcIk1JVFwiXG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQ0EsU0FBUyxlQUFlO0FBRXhCLE9BQU8sV0FBVztBQUNsQixTQUFTLG9CQUFvQjtBQUM3QixPQUFPLFNBQVM7QUFDaEIsT0FBTyxZQUFZO0FBQ25CLE9BQU8sbUJBQW1COzs7QUNpQ3hCLHVCQUFvQjtBQUFBLEVBQ2xCLG1CQUFtQjtBQUFBLEVBQ25CLGtCQUFrQjtBQUFBLEVBQ2xCLE9BQVM7QUFBQSxFQUNULGFBQWE7QUFDZjs7O0FEckNGLElBQU0sRUFBRSxVQUFVLGFBQWEsSUFBSTtBQUduQyxJQUFPLHNCQUFRLGFBQWEsQ0FBQyxlQUFlO0FBQUEsRUFDMUMsU0FBUztBQUFBLElBQ1AsTUFBTTtBQUFBLElBQ04sY0FBYztBQUFBLElBQ2QsYUFBYTtBQUFBLE1BQ1gsU0FBUyxDQUFDLHNCQUFzQjtBQUFBLE1BQ2hDLFNBQVMsQ0FBQyxJQUFJLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUFBLElBQ3ZDLENBQUM7QUFBQSxJQUNELElBQUk7QUFBQSxNQUNGLFNBQVMsQ0FBQyxNQUFNO0FBQUEsSUFDbEIsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxNQUNILE9BQU8sUUFBUSxPQUFPLFVBQVU7QUFBQSxNQUNoQyxNQUFNO0FBQUEsTUFDTixTQUFTLENBQUMsTUFBTSxLQUFLO0FBQUEsTUFDckIsVUFBVSxDQUFDLFdBQVcsd0JBQXdCO0FBQUEsSUFDaEQ7QUFBQSxJQUNBLGVBQWU7QUFBQSxNQUNiLFVBQVUsQ0FBQyxHQUFHLE9BQU8sS0FBaUIsZ0JBQWdCLENBQUM7QUFBQSxJQUN6RDtBQUFBLEVBQ0Y7QUFDRixFQUFFOyIsCiAgIm5hbWVzIjogW10KfQo=
